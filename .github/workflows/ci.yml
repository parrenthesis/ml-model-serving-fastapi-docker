name: ci

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build-test-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Discover project paths
        run: |
          APP_DIR=$(git ls-files | grep -E '.github/workflows/ci.yml$' | xargs -n1 dirname | xargs -n1 dirname | head -n1)
          if [ -z "$APP_DIR" ]; then
            APP_DIR=$(git ls-files | grep '/Dockerfile$' | xargs dirname | head -n1)
          fi
          if [ -z "$APP_DIR" ]; then APP_DIR=.; fi
          echo "APP_DIR=$APP_DIR" >> $GITHUB_ENV
          echo "Resolved APP_DIR=$APP_DIR"

      # Skipping Python/Poetry test env setup; this workflow uses container smoke tests below

      - name: Build Docker image
        working-directory: ${{ env.APP_DIR }}
        run: docker build -t housing-api:ci .

      - name: Scan image with Trivy
        uses: aquasecurity/trivy-action@0.20.0
        with:
          image-ref: 'housing-api:ci'
          format: 'table'
          exit-code: '0'
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

      - name: Install jq for tagging
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Tag image with model version
        if: ${{ always() }}
        working-directory: ${{ env.APP_DIR }}
        run: |
          docker image inspect housing-api:ci >/dev/null 2>&1 || docker build -t housing-api:ci .
          VERSION=$(jq -r '.model_version // .algorithm' model/metrics.json || echo "dev")
          docker tag housing-api:ci housing-api:${VERSION}

  build-and-smoke:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Discover project paths
        run: |
          APP_DIR=$(git ls-files | grep -E '.github/workflows/ci.yml$' | xargs -n1 dirname | xargs -n1 dirname | head -n1)
          if [ -z "$APP_DIR" ]; then
            APP_DIR=$(git ls-files | grep '/Dockerfile$' | xargs dirname | head -n1)
          fi
          if [ -z "$APP_DIR" ]; then APP_DIR=.; fi
          echo "APP_DIR=$APP_DIR" >> $GITHUB_ENV
          echo "Resolved APP_DIR=$APP_DIR"
      - name: Build image
        working-directory: ${{ env.APP_DIR }}
        run: docker build -t housing-api:ci .
      - name: Run container
        run: docker run -d -p 8000:8000 --name api housing-api:ci
      - name: Wait and smoke test
        run: |
          for i in {1..15}; do curl -sf http://localhost:8000/healthz && break || sleep 1; done
          curl -sf http://localhost:8000/readyz || (docker logs api && exit 1)
      - name: Stop
        if: always()
        run: docker rm -f api || true
